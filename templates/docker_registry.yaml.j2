apiVersion: v1
kind: Namespace
metadata:
  name: docker-registry

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-{{ docker_registry.nfs_IP }}-docker-registry
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 100Gi
  claimRef:
    name: nfs-{{ docker_registry.nfs_IP }}-docker-registry
    namespace: docker-registry
  nfs:
    path: {{ docker_registry.nfs_path }}
    server: {{ docker_registry.nfs_IP }}
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs
  volumeMode: Filesystem
  mountOptions:
    - hard
    - nfsvers=4.1

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-{{ docker_registry.nfs_IP }}-docker-registry
  namespace: docker-registry
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: nfs
  volumeName: nfs-{{ docker_registry.nfs_IP }}-docker-registry

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  namespace: docker-registry
  labels:
    app: docker-registry
spec:
  selector:
    matchLabels:
      app: docker-registry
  replicas: 1
  template:
    metadata:
      labels:
        app: docker-registry
    spec:
      containers:
        - image: registry:latest
          imagePullPolicy: Always
          name: docker-registry
          ports:
            - containerPort: 5000
              protocol: TCP
          volumeMounts:
            - mountPath: /var/lib/registry
              name: dockerregistry
      volumes:
        - name: dockerregistry
          persistentVolumeClaim:
            claimName: nfs-{{ docker_registry.nfs_IP }}-docker-registry

---
apiVersion: v1
kind: Service
metadata:
  name: docker-registry-service
  namespace: docker-registry
spec:
  type: ClusterIP
  ports:
    - targetPort: 5000
      port: 80
  selector:
    app: docker-registry

---

##########################################################################
# Create a secret that the ingress controller will read for basic-auth,
# Then create the ingress object.
##########################################################################
apiVersion: v1
kind: Secret
data:
  # generated by `htpasswd -c auth username; cat auth | base64`
  auth: {{ env("DOCKER_REGISTRY_HTPASSWD_B64") }}
metadata:
  name: docker-registry-basic-auth
  namespace: docker-registry
type: Opaque

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: docker-registry-ingress
  namespace: docker-registry
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-cert-manager"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: docker-registry-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
    nginx.ingress.kubernetes.io/proxy-body-size: 10g
spec:
  tls:
    - hosts:
        - {{ docker_registry.domain }}
      secretName: tls-docker-registry
  rules:
    - host: {{ docker_registry.domain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: docker-registry-service
                port:
                  number: 80

---

##########################################################################
# Ensure authentication secrets exist in sciencedata namespaces
# First ensure the namespaces exist, then create the secrets
##########################################################################

apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-auth
  namespace: sciencedata
data:
  .dockerconfigjson: {{ env("DOCKER_REGISTRY_LOGIN_CONFIG_B64") }}
type: kubernetes.io/dockerconfigjson

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-auth
  namespace: sciencedata-dev
data:
  .dockerconfigjson: {{ env("DOCKER_REGISTRY_LOGIN_CONFIG_B64") }}
type: kubernetes.io/dockerconfigjson
---
