apiVersion: v1
kind: Namespace
metadata:
  name: acme-dns
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfs-{{ acmedns.nfs_IP }}-acme-dns
spec:
  accessModes:
    - ReadWriteMany
  capacity:
    storage: 100Gi
  claimRef:
    name: nfs-{{ acmedns.nfs_IP }}-acme-dns
    namespace: acme-dns
  nfs:
    path: {{ acmedns.nfs_path }}
    server: {{ acmedns.nfs_IP }}
  persistentVolumeReclaimPolicy: Retain
  storageClassName: nfs
  volumeMode: Filesystem
  mountOptions:
    - hard
    - nfsvers=4.1
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nfs-{{ acmedns.nfs_IP }}-acme-dns
  namespace: acme-dns
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: nfs
  volumeName: nfs-{{ acmedns.nfs_IP }}-acme-dns
---
apiVersion: v1
kind: Service
metadata:
  name: acme-dns-http
  namespace: acme-dns
spec:
  type: ClusterIP
  ports:
    - targetPort: {{ acmedns.host_http_port }}
      port: 80
  selector:
    app: acme-dns
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: acme-dns
  namespace: acme-dns
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/whitelist-source-range: 127.0.0.0/8,{{ trusted_network_cidr }},{{ vlan_subnet_cidr }},{{ cluster_range }}
spec:
  tls:
  rules:
    - host: {{ acmedns.hostname }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: acme-dns-http
                port:
                  number: 80
---
apiVersion: v1
metadata:
  name: config
  namespace: acme-dns
kind: ConfigMap
data:
  acme-dns-config: |
    [general]
    # DNS interface. Note that systemd-resolved may reserve port 53 on 127.0.0.53
    # In this case acme-dns will error out and you will need to define the listening interface
    # for example: listen = "127.0.0.1:53"
    listen = "{{ public_network_configs[acmedns.node_hostname].address }}:53"
    # protocol, "both", "both4", "both6", "udp", "udp4", "udp6" or "tcp", "tcp4", "tcp6"
    protocol = "both"
    # domain name to serve the requests off of
    domain = "{{ acmedns.zone }}"
    # zone name server
    nsname = "{{ acmedns.hostname }}"
    # admin email address, where @ is substituted with .
    nsadmin = "{{ acmedns.admin_email }}"
    # predefined records served in addition to the TXT
    records = [
        "{{ acmedns.zone }}. A {{ public_network_configs[acmedns.node_hostname].address }}",
        "{{ acmedns.zone }}. NS {{ acmedns.hostname }}",
    ]
    # debug messages from CORS etc
    debug = true
    
    [database]
    # Database engine to use, sqlite3 or postgres
    engine = "sqlite3"
    # Connection string, filename for sqlite3 and postgres://$username:$password@$host/$db_name for postgres
    # Please note that the default Docker image uses path /var/lib/acme-dns/acme-dns.db for sqlite3
    connection = "/var/lib/acme-dns/acme-dns.db"
    # connection = "postgres://user:password@localhost/acmedns_db"
    
    [api]
    # listen ip eg. 127.0.0.1
    ip = "0.0.0.0"
    # disable registration endpoint
    disable_registration = false
    # listen port, eg. 443 for default HTTPS
    port = "{{ acmedns.host_http_port }}"
    # possible values: "letsencrypt", "letsencryptstaging", "cert", "none"
    tls = "none"
    # only used if tls = "cert"
    tls_cert_privkey = "/etc/tls/example.org/privkey.pem"
    tls_cert_fullchain = "/etc/tls/example.org/fullchain.pem"
    # only used if tls = "letsencrypt"
    acme_cache_dir = "api-certs"
    # optional e-mail address to which Let's Encrypt will send expiration notices for the API's cert
    notification_email = ""
    # CORS AllowOrigins, wildcards can be used
    corsorigins = [
    "*"
    ]
    # use HTTP header to get the client ip
    use_header = false
    # header name to pull the ip address / list of ip addresses from
    header_name = "X-Forwarded-For"
    
    [logconfig]
    # logging level: "error", "warning", "info" or "debug"
    loglevel = "debug"
    # possible values: stdout, TODO file & integrations
    logtype = "stdout"
    # file path for logfile TODO
    # logfile = "./acme-dns.log"
    # format, either "json" or "text"
    logformat = "text"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: acme-dns
  namespace: acme-dns
  labels:
    app: acme-dns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: acme-dns
  template:
    metadata:
      labels:
        app: acme-dns
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      nodeSelector:
        hasPublicIP: "true"
        kubernetes.io/hostname: {{ acmedns.node_hostname }}
      containers:
        - name: acme-dns
          image: docker.io/joohoi/acme-dns
          ports:
            - containerPort: {{ acmedns.host_http_port }}
              protocol: TCP
            - containerPort: 53
              protocol: TCP
            - containerPort: 53
              protocol: UDP
          volumeMounts:
            - mountPath: /var/lib/acme-dns
              name: acme-dns-data
            - mountPath: /etc/acme-dns
              name: acme-dns-config
      volumes:
        - name: acme-dns-data
          persistentVolumeClaim:
            claimName: nfs-{{ acmedns.nfs_IP }}-acme-dns
        - name: acme-dns-config
          configMap:
            name: config
            items:
              - key: acme-dns-config
                path: config.cfg
---
